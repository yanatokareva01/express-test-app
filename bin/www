#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-test-app:server');
const http = require('http');
const segmentTreeUtils = require('../src/segmentTreeUtils');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Основные параметры набора чисел
 */
global.initialSetSize = 1e6;
global.minValue = 1;
global.maxValue = 1e9;
global.countOfParts = 1e2;

/**
 * Инициализация исходного набора чисел (будет выполняться при каждом запуске сервера)
 * и дерева отрезков
 */
const generator = require('../src/generator');
generator
	.clear()
	.then(() => {
		return generator.generate(
			global.initialSetSize,
			global.minValue,
			global.maxValue,
			global.countOfParts);
	})
	.then(() => {
		return segmentTreeUtils.init();
	})
	.then(() => {
		/**
		 * Listen on provided port, on all network interfaces.
		 */
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);
	})
	.catch((err) => {
		console.log('Ошибка инициализации сервера');
	});

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
